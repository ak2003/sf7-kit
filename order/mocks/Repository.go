// Code generated by mockery v2.6.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "gt-kit/order/model"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteProduct provides a mock function with given fields: ct, uid
func (_m *Repository) DeleteProduct(ct context.Context, uid string) error {
	ret := _m.Called(ct, uid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ct, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetShoppingCart provides a mock function with given fields: ctx, id
func (_m *Repository) GetShoppingCart(ctx context.Context, id string) (*model.ShoppingCart, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.ShoppingCart
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.ShoppingCart); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ShoppingCart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveShoppingCart provides a mock function with given fields: ctx, sc
func (_m *Repository) SaveShoppingCart(ctx context.Context, sc model.ShoppingCart) error {
	ret := _m.Called(ctx, sc)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ShoppingCart) error); ok {
		r0 = rf(ctx, sc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateItemShoppingCart provides a mock function with given fields: ctx, id, itemCart, total
func (_m *Repository) UpdateItemShoppingCart(ctx context.Context, id string, itemCart []model.ItemCart, total int64) error {
	ret := _m.Called(ctx, id, itemCart, total)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []model.ItemCart, int64) error); ok {
		r0 = rf(ctx, id, itemCart, total)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
